var actiGuide = {}, agGridState = !1;

$(document).keydown(function(e) {
    e && 192 === e.keyCode && e.shiftKey && e.ctrlKey && (agGridState ? (agGridState = !1, 
    $("#in-guidelines").remove()) : (agGridState = !0, $("BODY").append('<div id="in-guidelines"><div id="guidelines"><div class="for-guidelines"><div class="col-edge-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-edge-1"><div class="box"><p class="grid-p"></p></div></div><div class="left-padding-grid"></div><div class="right-padding-grid"></div></div></div></div>')));
}), function($) {
    function CoreUISelect(__elem, __options, __templates) {
        this.domSelect = __elem, this.settings = __options || defaultOption, this.isSelectShow = !1, 
        this.isSelectFocus = !1, this.isJScrollPane = this.isJScrollPane();
        var autotestBut = "", autotestItem = "";
        null != $(this.domSelect).attr("data-qa") && (autotestBut = "data-qa=" + $(this.domSelect).attr("data-qa") + ".but", 
        autotestItem = "data-qa=" + $(this.domSelect).attr("data-qa") + ".item"), this.templates = __templates || {
            select: {
                container: '<div class="btn btn__select"></div>',
                value: '<span class="btn-in"' + autotestBut + "></span>",
                button: '<span class="btn-ugl"></span>'
            },
            dropdown: {
                container: '<div class="select-dropdown"></div>',
                wrapper: '<div class="select-dropdown-wrap"></div>',
                list: '<ul class="nav-list"></ul>',
                optionLabel: '<li class="select-item list-subtitle"></li>',
                item: '<li class="select-item" ' + autotestItem + "></li>"
            }
        }, this.init(this.settings);
    }
    function dispatchEvent(obj, evt, doc) {
        var doc = doc || document;
        if (void 0 !== obj || null !== obj) if (doc.createEvent) {
            var evObj = doc.createEvent("MouseEvents");
            evObj.initEvent(evt, !0, !1), obj.dispatchEvent(evObj);
        } else if (doc.createEventObject) {
            var evObj = doc.createEventObject();
            obj.fireEvent("on" + evt, evObj);
        }
    }
    var defaultOption = {
        appendToBody: !1,
        jScrollPane: null,
        onInit: null,
        onFocus: null,
        onBlur: null,
        onOpen: null,
        onClose: null,
        onChange: null,
        onDestroy: null
    }, allSelects = [];
    $.browser.mobile = /iphone|ipad|ipod|android/i.test(navigator.userAgent.toLowerCase()), 
    $.browser.operamini = "[object OperaMini]" === Object.prototype.toString.call(window.operamini), 
    CoreUISelect.prototype.init = function() {
        return $.browser.operamini ? this : (this.buildUI(), this.hideDomSelect(), this.domSelect.is(":disabled") ? (this.select.addClass("disabled"), 
        this) : (this.isJScrollPane && this.buildJScrollPane(), this.bindUIEvents(), void (this.settings.onInit && this.settings.onInit.apply(this, [ this.domSelect, "init" ]))));
    }, CoreUISelect.prototype.buildUI = function() {
        this.select = $(this.templates.select.container).insertBefore(this.domSelect), this.selectValue = $(this.templates.select.value).appendTo(this.select), 
        this.selectButton = $(this.templates.select.button).appendTo(this.select), this.dropdown = $(this.templates.dropdown.container), 
        this.dropdownWrapper = $(this.templates.dropdown.wrapper).appendTo(this.dropdown), 
        this.settings.appendToBody ? this.dropdown.appendTo($("body")) : this.dropdown.insertBefore(this.domSelect), 
        this.dropdownList = $(this.templates.dropdown.list).appendTo(this.dropdownWrapper), 
        this.domSelect.find("option").each($.proxy(this, "addItems")), this.dropdownItem = this.dropdown.find("." + $(this.templates.dropdown.item).attr("class")), 
        this.dropdownItem.filter(":first-child").addClass("first"), this.dropdownItem.filter(":last-child").addClass("last"), 
        this.addOptionGroup(), this.setSelectValue(this.getSelectedItem().text()), this.updateDropdownPosition(), 
        this.currentItemOfDomSelect = this.currentItemOfDomSelect || this.domSelect.find("option:selected");
    }, CoreUISelect.prototype.hideDomSelect = function() {
        this.domSelect.addClass("select__state_hide");
    }, CoreUISelect.prototype.showDomSelect = function() {
        this.domSelect.css({
            top: "auto",
            left: "auto"
        }), this.domSelect.removeClass("select__state_hide");
    }, CoreUISelect.prototype.bindUIEvents = function() {
        this.domSelect.bind("focus", $.proxy(this, "onFocus")), this.domSelect.bind("blur", $.proxy(this, "onBlur")), 
        this.domSelect.bind("change", $.proxy(this, "onChange")), this.domSelect.bind("keydown", $.proxy(this, "onKeydown")), 
        $.browser.mobile && this.domSelect.bind("change", $.proxy(this, "changeDropdownData")), 
        this.select.bind("click", $.proxy(this, "onSelectClick")), this.dropdownItem.bind("click", $.proxy(this, "onDropdownItemClick"));
    }, CoreUISelect.prototype.getCurrentIndexOfItem = function() {
        return this.domSelect.find("option").index($(this.domSelect).find("option:selected"));
    }, CoreUISelect.prototype.scrollToCurrentDropdownItem = function(__item) {
        return this.dropdownWrapper.data("jsp") ? (this.dropdownWrapper.data("jsp").scrollToElement(__item), 
        this) : void $(this.dropdownWrapper).scrollTop($(this.dropdownWrapper).scrollTop() + __item.position().top - $(this.dropdownWrapper).height() / 2 + __item.height() / 2);
    }, CoreUISelect.prototype.buildJScrollPane = function() {
        this.dropdownWrapper.wrap($('<div class="j-scroll-pane"></div>'));
    }, CoreUISelect.prototype.isJScrollPane = function() {
        if (this.settings.jScrollPane) {
            if ($.fn.jScrollPane) return !0;
            throw new Error("jScrollPane no found");
        }
    }, CoreUISelect.prototype.initJScrollPane = function() {
        this.dropdownWrapper.jScrollPane(this.settings.jScrollPane);
    }, CoreUISelect.prototype.showDropdown = function() {
        return this.settings.onOpen && this.settings.onOpen.apply(this, [ this.domSelect, "open" ]), 
        $.browser.mobile ? this : void (this.isSelectShow || (this.isSelectShow = !0, this.select.addClass("active"), 
        this.dropdown.addClass("show").removeClass("hide"), this.isJScrollPane && this.initJScrollPane(), 
        this.scrollToCurrentDropdownItem(this.dropdownItem.eq(this.getCurrentIndexOfItem())), 
        this.updateDropdownPosition()));
    }, CoreUISelect.prototype.hideDropdown = function() {
        this.isSelectShow && (this.isSelectShow = !1, this.select.removeClass("active"), 
        this.dropdown.removeClass("show").addClass("hide"), this.settings.onClose && this.settings.onClose.apply(this, [ this.domSelect, "close" ])), 
        this.isSelectFocus && this.domSelect.focus();
    }, CoreUISelect.prototype.hideAllDropdown = function() {
        for (var i in allSelects) allSelects[i].hasOwnProperty(i) && (allSelects.dropdown.isSelectShow = !1, 
        allSelects.dropdown.domSelect.blur(), allSelects.dropdown.addClass("hide").removeClass("show"));
    }, CoreUISelect.prototype.changeDropdownData = function() {
        (this.isSelectShow || this.isSelectFocus) && (this.currentItemOfDomSelect = this.domSelect.find("option:selected"), 
        this.dropdownItem.removeClass("active"), this.dropdownItem.eq(this.getCurrentIndexOfItem()).addClass("active"), 
        this.scrollToCurrentDropdownItem(this.dropdownItem.eq(this.getCurrentIndexOfItem())), 
        this.setSelectValue(this.currentItemOfDomSelect.text())), $.browser.mobile && this.settings.onChange && this.settings.onChange.apply(this, [ this.domSelect, "change" ]);
    }, CoreUISelect.prototype.onDomSelectChange = function(_is) {
        this.domSelect.bind("change", $.proxy(this, "onChange")), dispatchEvent(this.domSelect.get(0), "change"), 
        _is || this.settings.onChange && this.settings.onChange.apply(this, [ this.domSelect, "change" ]);
    }, CoreUISelect.prototype.addListenerByServicesKey = function(event) {
        if (this.isSelectShow) switch (event.which) {
          case 9:
          case 13:
          case 27:
            this.hideDropdown();
            break;

          case 38:
            console.log(this.getCurrentIndexOfItem());
            break;

          case 40:
            console.log(this.getCurrentIndexOfItem());
        }
    }, CoreUISelect.prototype.onSelectClick = function(event) {
        this.isSelectShow ? this.hideDropdown() : (event.stopPropagation(), this.showDropdown());
    }, CoreUISelect.prototype.onFocus = function() {
        this.isDocumentMouseDown = !1, this.isSelectFocus = !0, this.select.addClass("focus"), 
        this.settings.onFocus && this.settings.onFocus.apply(this, [ this.domSelect, "focus" ]);
    }, CoreUISelect.prototype.onBlur = function() {
        this.isDocumentMouseDown || (this.isSelectFocus = !1, this.select.removeClass("focus"), 
        this.settings.onBlur && this.settings.onBlur.apply(this, [ this.domSelect, "blur" ]));
    }, CoreUISelect.prototype.onChange = function() {
        this.settings.onChange && this.settings.onChange.apply(this, [ this.domSelect, "change" ]);
    }, CoreUISelect.prototype.onKeydown = function(event) {
        switch (9 != event.which && event.preventDefault(), event.which) {
          case 32:
            this.showDropdown();
        }
    }, CoreUISelect.prototype.onDropdownItemClick = function(event) {
        var item = $(event.currentTarget);
        if (!item.hasClass("disabled") && !item.hasClass("active")) {
            this.domSelect.unbind("change", $.proxy(this, "onChange"));
            var index = this.dropdown.find("." + $(this.templates.dropdown.item).attr("class")).index(item);
            this.dropdownItem.removeClass("active"), this.dropdownItem.eq(index).addClass("active"), 
            this.domSelect.find("option").removeAttr("selected"), this.domSelect.find("option").eq(index).attr("selected", !0), 
            this.setSelectValue(this.getSelectedItem().text()), this.onDomSelectChange(!0);
        }
        return item.hasClass("disabled") || this.hideDropdown(), !1;
    }, CoreUISelect.prototype.onDocumentMouseDown = function(event) {
        return this.isDocumentMouseDown = !0, 0 == $(event.target).closest(this.select).length && 0 == $(event.target).closest(this.dropdown).length && 0 == $(event.target).closest("option").length && (this.isDocumentMouseDown = !1, 
        this.hideDropdown()), !1;
    }, CoreUISelect.prototype.updateDropdownPosition = function() {
        if (this.isSelectShow) {
            this.dropdown.css(this.settings.appendToBody ? {
                position: "absolute",
                top: this.select.offset().top + this.select.outerHeight(!0),
                left: this.select.offset().left,
                "z-index": "9999"
            } : {
                position: "absolute",
                top: this.select.position().top + this.select.outerHeight(!0),
                left: this.select.position().left,
                "z-index": "9999"
            });
            var marginDifferenceBySelect = this.select.outerWidth() - this.select.width(), marginDifferenceByDropdown = this.dropdown.outerWidth() - this.dropdown.width();
            parseInt(this.dropdown.css("min-width")) == this.select.outerWidth() && this.dropdown.css("min-width", this.select.width() + marginDifferenceBySelect - marginDifferenceByDropdown), 
            this.isJScrollPane && this.initJScrollPane();
        }
    }, CoreUISelect.prototype.setSelectValue = function(_text) {
        this.selectValue.text(_text);
    }, CoreUISelect.prototype.isOptionGroup = function() {
        return this.domSelect.find("optgroup").length > 0;
    }, CoreUISelect.prototype.addOptionGroup = function() {
        for (var optionGroup = this.domSelect.find("optgroup"), i = 0; i < optionGroup.length; i++) {
            var index = this.domSelect.find("option").index($(optionGroup[i]).find("option:first-child"));
            $(this.templates.dropdown.optionLabel).text($(optionGroup[i]).attr("label")).insertBefore(this.dropdownItem.eq(index));
        }
    }, CoreUISelect.prototype.addItems = function(index, el) {
        var el = $(el), item = $(this.templates.dropdown.item).text(el.text());
        el.attr("disabled") && item.addClass("disabled"), el.attr("selected") && (this.domSelect.find("option").removeAttr("selected"), 
        item.addClass("active"), el.attr("selected", "selected")), item.appendTo(this.dropdownList);
    }, CoreUISelect.prototype.getSelectedItem = function() {
        return this.dropdown.find(".active").eq(0);
    }, CoreUISelect.prototype.update = function() {
        this.destroy(), this.init();
    }, CoreUISelect.prototype.destroy = function() {
        this.domSelect.unbind("focus", $.proxy(this, "onFocus")), this.domSelect.unbind("blur", $.proxy(this, "onBlur")), 
        this.domSelect.unbind("change", $.proxy(this, "onChange")), this.domSelect.unbind("keydown", $.proxy(this, "onKeydown")), 
        this.select.unbind("click", $.proxy(this, "onSelectClick")), this.dropdownItem.unbind("click", $.proxy(this, "onDropdownItemClick")), 
        this.select.remove(), this.dropdown.remove(), this.showDomSelect(), this.settings.onDestroy && this.settings.onDestroy.apply(this, [ this.domSelect, "destroy" ]);
    }, $.fn.coreUISelect = function(__options, __templates) {
        return this.each(function() {
            var select = $(this).data("coreUISelect");
            if ("destroy" != __options || select) if (select) {
                if (__options = "string" == typeof __options && select[__options] ? __options : "update", 
                select[__options].apply(select), "destroy" == __options) {
                    $(this).removeData("coreUISelect");
                    for (var i = 0; i < allSelects.length; i++) if (allSelects[i] == select) {
                        allSelects.splice(i, 1);
                        break;
                    }
                }
            } else select = new CoreUISelect($(this), __options, __templates), allSelects.push(select), 
            $(this).data("coreUISelect", select);
        });
    }, $(document).bind("mousedown", function(event) {
        for (var i = 0; i < allSelects.length; i++) allSelects[i].onDocumentMouseDown(event);
    }), $(document).bind("keyup", function(event) {
        for (var i = 0; i < allSelects.length; i++) ($.browser.safari || $.browser.msie || $.browser.opera) && allSelects[i].changeDropdownData(event), 
        allSelects[i].addListenerByServicesKey(event);
    }), $(document).bind($.browser.safari ? "keydown" : "keypress", function(event) {
        for (var i = 0; i < allSelects.length; i++) allSelects[i].changeDropdownData(event);
    }), $(window).bind("resize", function(event) {
        for (var i = 0; i < allSelects.length; i++) allSelects[i].updateDropdownPosition(event);
    });
}(jQuery), actiGuide.mainModule = angular.module("mainModule", []), actiGuide.mainModule.controller("TestFormCtrl", function($scope, $timeout, alertBox) {
    $scope.Model = {}, $scope.Model.PaymentTypeCatalog = [ {
        Name: "Оплата контрагенту",
        Id: 1
    }, {
        Name: "Возврат контрагенту",
        Id: 2
    }, {
        Name: "Штраф и неустойка контрагенту",
        Id: 3
    }, {
        Name: "Выплата зарплаты",
        Id: 4
    } ], $scope.Model.PaymentType = $scope.Model.PaymentTypeCatalog[0], $scope.saveTestForm = function(disabled) {
        disabled || ($scope.sending = !0, $timeout(function() {
            $scope.sending = !1, $timeout(function() {
                alertBox.push("Сохранение успешно");
            });
        }, 2e3));
    }, $scope.checkPaymentType = function() {
        return 4 == $scope.Model.PaymentType.Id;
    };
}), actiGuide.mainModule.controller("TabsCtrl", function($scope) {
    $scope.Model = {}, $scope.handler = function(value) {
        console.warn(value);
    };
}), actiGuide.mainModule.directive("btnSelect", function() {
    var $btnsList = $();
    return $(document).on("click", function() {
        $btnsList.removeClass("active").find(".select-dropdown").hide();
    }), {
        restrict: "C",
        link: function(scope, element) {
            $btnsList = $btnsList.add(element);
            var dropdown = $(".select-dropdown", element);
            element.on("click", function(event) {
                element.hasClass("active") ? dropdown.hide() : (event.stopPropagation(), $btnsList.removeClass("active").find(".select-dropdown").hide(), 
                dropdown.show()), element.toggleClass("active");
            });
        }
    };
}), actiGuide.mainModule.directive("btn", function() {
    return {
        restrict: "C",
        replace: !1,
        transclude: !0,
        template: '<span class="btn-in" data-ng-transclude></span>'
    };
}), actiGuide.mainModule.directive("dateField", function($sniffer, $browser) {
    var options = {
        yearLimitMax: 2100,
        yearLimitMin: 1900,
        daysInMonth: [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
        monthLimit: 12
    };
    return {
        restrict: "EA",
        require: "ngModel",
        scope: !0,
        link: function(scope, element, attrs, ngModelCtrl) {
            function setValue(day, month, year) {
                var totalValue;
                day && month && 4 == (year + "").length && (totalValue = day + "." + month + "." + year), 
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(totalValue);
                });
            }
            var inputDay = element.find("input:first"), inputMonth = element.find("input:eq(1)"), inputYear = element.find("input:last"), inputs = element.find("input");
            ngModelCtrl.$render = function() {
                if (ngModelCtrl.$viewValue) {
                    var value = String(ngModelCtrl.$viewValue).split(".");
                    inputDay.val(value[0]), inputMonth.val(value[1]), inputYear.val(value[2]);
                } else inputs.val("");
            };
            var listener = function() {
                var day = parseInt(inputDay.val()), month = parseInt(inputMonth.val()), year = parseInt(inputYear.val());
                options.dayLimit = 2 == month && 4 == (year + "").length ? new Date(year, month, 0).getDate() : month ? options.daysInMonth[month - 1] : 31, 
                day > options.dayLimit && (day = options.dayLimit, inputDay.val(options.dayLimit)), 
                month > options.monthLimit && (month = options.monthLimit, inputMonth.val(options.monthLimit)), 
                year > options.yearLimitMax && (year = options.yearLimitMax, inputYear.val(options.yearLimitMax)), 
                setValue(day, month, year);
            };
            if ($sniffer.hasEvent("input")) inputs.on("input", listener); else {
                var timeout, deferListener = function() {
                    timeout || (timeout = $browser.defer(function() {
                        listener(), timeout = null;
                    }));
                };
                inputs.on("keydown", function(event) {
                    var key = event.keyCode;
                    91 === key || key > 15 && 19 > key || key >= 37 && 40 >= key || deferListener();
                }), inputs.on("change", listener), $sniffer.hasEvent("paste") && inputs.on("paste cut", deferListener);
            }
            inputs.on("focusout", function() {
                var day = parseInt(inputDay.val()), month = parseInt(inputMonth.val()), year = parseInt(inputYear.val());
                0 === day && (day = 1, inputDay.val(day)), 0 === month && (month = 1, inputMonth.val(month)), 
                year < options.yearLimitMin && (year = options.yearLimitMin, inputYear.val(year)), 
                setValue(day, month, year);
            }), element.on("focus", function() {
                inputDay.focus();
            }), "disabled" in attrs && inputs.attr("disabled", "disabled"), "readonly" in attrs && inputs.attr("readonly", "readonly"), 
            "id" in attrs && (inputDay.attr("id", attrs.id + "_Day"), inputMonth.attr("id", attrs.id + "_Month"), 
            inputYear.attr("id", attrs.id + "_Year")), "name" in attrs && (inputDay.attr("name", attrs.name + ".Day"), 
            inputMonth.attr("name", attrs.name + ".Month"), inputYear.attr("name", attrs.name + ".Year")), 
            attrs.ngDisabled && scope.$watch(attrs.ngDisabled, function(newValue) {
                inputs.attr("disabled", newValue);
            }), attrs.ngReadonly && scope.$watch(attrs.ngReadonly, function(newValue) {
                inputs.attr("readonly", newValue);
            });
        },
        template: '<div class="dib" data-split-fields><input class="t-input t-input__micro first" placeholder="ДД" maxlength="2"><input class="t-input t-input__micro" placeholder="ММ" maxlength="2"><input class="t-input t-input__mini last" placeholder="ГГГГ" maxlength="4"></div>',
        replace: !0
    };
}), actiGuide.mainModule.directive("datepicker", [ "ranges", "VIEWS_PATH", function(RangesService, VIEWS_PATH) {
    return {
        restrict: "E",
        scope: {
            mDate: "="
        },
        replace: !0,
        transclude: !1,
        templateUrl: VIEWS_PATH + "datepicker.html",
        link: function($scope, $element, $attrs) {
            function getDayOfWeek(date) {
                var day = date.getDay();
                return 0 == day && (day = 7), day - 1;
            }
            function daysInMonth(date) {
                return 33 - new Date(date.getFullYear(), date.getMonth(), 33).getDate();
            }
            function checkInputsValue($scope, inputValue) {
                var _inputValue = _.clone(inputValue);
                if (!(_inputValue.year.length < 4)) {
                    _inputValue.month = 0 == parseInt(_inputValue.month, 10) ? 0 : _inputValue.month - 1;
                    var valueToCheck = [ 0 | _inputValue.year, 0 | _inputValue.month, 0 | _inputValue.day ];
                    moment(valueToCheck).isValid() && (isDateDisabled(_inputValue) ? ($scope.isSubmitDisabled = !0, 
                    $scope.submitTooltip = _inputValue.tooltip) : (DATE_SELECTED = new Date(_inputValue.year, _inputValue.month, _inputValue.day), 
                    $scope.renderDays(_inputValue.year, _inputValue.month), $scope.isSubmitDisabled = !1, 
                    $scope.showSubmitTooltip = !1));
                }
            }
            function parseDateString(date) {
                var format = "D.M.YYYY", result = moment(date, format);
                return result.isValid() ? result.toDate() : date;
            }
            function isDateDisabled(date) {
                var dateToCheck = new Date(date.year, date.month, date.day), result = isDaySelectable(dateToCheck);
                return date.tooltip = result.message, !result.selectable;
            }
            function isToday(item) {
                return TODAY.getDate() == item.day && TODAY.getMonth() == item.month && TODAY.getFullYear() == item.year;
            }
            function isCurrent(item) {
                var _d = DATE_SELECTED;
                return _d.getFullYear() == item.year && _d.getMonth() == item.month && _d.getDate() == item.day ? !isDateDisabled(item) : !1;
            }
            var TODAY = new Date(), RENDER_DATE = TODAY, DATE_SELECTED = TODAY;
            $scope.isDisableBtn = !1, $scope.RangesService = RangesService, $scope.bindedTo = $attrs.alternativeBinding ? $attrs.alternativeBinding : $attrs.mDate, 
            $scope.inputValue = {
                day: parseInt(TODAY.getDay(), 10),
                month: parseInt(TODAY.getMonth(), 10),
                year: parseInt(TODAY.getFullYear(), 10)
            }, $scope.showSubmitTooltip = !1, $scope.submitTooltip = "", $scope.week = [ "пн", "вт", "ср", "чт", "пт", "сб", "вс" ], 
            $scope.month = [ "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" ], 
            $scope.$on("RangesChanged", function() {
                $scope.renderDays(DATE_SELECTED.getFullYear(), DATE_SELECTED.getMonth());
            }), $scope.clickBtn = function() {
                $scope.isSubmitDisabled ? ($scope.showSubmitTooltip = !0, setTimeout(function() {
                    $scope.showSubmitTooltip = !1, $scope.$apply();
                }, 1e3)) : $scope.choose();
            }, $scope.renderDays = function(year, month) {
                function addDay(d, m, y) {
                    var day = {
                        day: d,
                        month: m,
                        year: y
                    };
                    day.isCurrent = isCurrent(day), day.isDisabled = isDateDisabled(day), day.isToday = isToday(day), 
                    $scope.days.push(day);
                }
                var date = new Date(year, month), prevMonth = new Date(date.getFullYear(), date.getMonth() - 1);
                $scope.days = [], $scope.title = $scope.month[date.getMonth()] + ", " + date.getFullYear();
                for (var i = 0; i < getDayOfWeek(date); i++) addDay(daysInMonth(prevMonth) - (getDayOfWeek(date) - i - 1), prevMonth.getMonth(), prevMonth.getFullYear());
                for (;date.getMonth() == month; ) addDay(date.getDate(), date.getMonth(), date.getFullYear()), 
                date.setDate(date.getDate() + 1);
                if (0 != getDayOfWeek(date)) for (var i = getDayOfWeek(date); 7 > i; i++) addDay(date.getDate(), date.getMonth(), date.getFullYear()), 
                date.setDate(date.getDate() + 1);
                var _dateSelected = {
                    day: DATE_SELECTED.getDate(),
                    month: DATE_SELECTED.getMonth(),
                    year: DATE_SELECTED.getFullYear()
                };
                if (isDateDisabled(_dateSelected)) {
                    var result, activeRange = RangesService.getActiveRangeForDatepicker($scope.bindedTo), _d = moment([ _dateSelected.year, _dateSelected.month, _dateSelected.day ]), dStart = activeRange.from.add("day", 1), dEnd = activeRange.to.subtract("day", 1);
                    dStart.isAfter(dEnd), result = dStart.isSame(dEnd) ? dStart : _d.diff(dStart) < 0 ? _d.diff(dStart) < _d.diff(dEnd) ? dEnd : dStart : _d.diff(dStart) < _d.diff(dEnd) ? dStart : dEnd, 
                    DATE_SELECTED = result.toDate(), $scope.mDate = result.format("DD.MM.YYYY");
                }
            }, $scope.nextMonth = function() {
                var year = RENDER_DATE.getFullYear(), month = RENDER_DATE.getMonth();
                11 == month ? (year++, month = 0) : month++, RENDER_DATE = new Date(year, month), 
                $scope.renderDays(year, month);
            }, $scope.prevMonth = function() {
                var month = RENDER_DATE.getMonth(), year = RENDER_DATE.getFullYear();
                0 == month ? (year--, month = 11) : month--, RENDER_DATE = new Date(year, month), 
                $scope.renderDays(year, month);
            }, $scope.choose = function(item) {
                var item = item ? item : {
                    year: DATE_SELECTED.getFullYear(),
                    month: DATE_SELECTED.getMonth(),
                    day: DATE_SELECTED.getDate()
                };
                if (isDateDisabled(item)) item.isShow = !0, setTimeout(function() {
                    item.isShow = !1, $scope.$apply();
                }, 1e3); else {
                    var date = new Date(item.year, item.month, item.day);
                    DATE_SELECTED = date, $scope.inputValue.day = item.day, $scope.inputValue.month = item.month + 1, 
                    $scope.inputValue.year = item.year, $scope.renderDays(item.year, item.month), $scope.mDate = moment(date).format("DD.MM.YYYY");
                }
            };
            var isDaySelectable = RangesService.isDateSelectable.bind($scope.bindedTo);
            $scope.$watch("mDate", function(newVal, oldVal, $scope) {
                if (oldVal !== newVal) {
                    var date = parseDateString(newVal);
                    DATE_SELECTED = date, RENDER_DATE = new Date(date.getFullYear(), date.getMonth()), 
                    $scope.renderDays(date.getFullYear(), date.getMonth());
                }
            }), $scope.$watch("inputValue", function(newVal, oldVal, $scope) {
                oldVal !== newVal && checkInputsValue($scope, newVal);
            }, !0), isDateDisabled({
                year: DATE_SELECTED.getFullYear(),
                month: DATE_SELECTED.getMonth(),
                day: DATE_SELECTED.getDate()
            }) ? $scope.renderDays(1970, 1) : $scope.choose();
        }
    };
} ]), actiGuide.mainModule.directive("dropdown", function($window, $timeout, $sce, layers) {
    return {
        restrict: "E",
        transclude: !0,
        templateUrl: "templates/dropdown.html",
        replace: !0,
        scope: !0,
        controller: function($scope, $element, $attrs) {
            $scope.visible = !1, $scope.caller = $sce.trustAsHtml($attrs.caller), $scope.toggleDropdown = function() {
                0 === layers.layersList.length ? ($scope.visible = !0, layers.layersList.push($element[0])) : layers.layersList.length > 0 && layers.isUpInTree($element[0]) && layers.layersList.indexOf($element[0]) < 0 ? ($scope.visible = !0, 
                layers.layersList.push($element[0])) : layers.layersList.length > 0 && layers.layersList.indexOf($element[0]) > -1 && layers.layersList[layers.layersList.length - 1] === $element[0] ? ($scope.visible = !1, 
                layers.layersList.pop()) : layers.layersList.length > 0 && layers.layersList.indexOf($element[0]) > -1 && (angular.element(layers.layersList[layers.layersList.length - 1]).scope().visible = !1, 
                layers.layersList.pop()), $element[0].offsetWidth < 50 && ($scope.smallWrap = !0);
            }, $scope.$watch("visible", function(newVal) {
                var doc = angular.element(document).find("BODY")[0];
                angular.forEach($element.children(), function(element) {
                    angular.element(element).hasClass("dropdown_container") && (element.style.display = newVal ? "block" : "none", 
                    $scope.reflectHorizontal = doc.clientWidth < element.getBoundingClientRect().right, 
                    $scope.reflectVertical = doc.clientHeight < element.getBoundingClientRect().bottom);
                });
            });
        }
    };
}), actiGuide.mainModule.directive("dynLoad", function($http, $sce, $timeout, $parse, $interpolate, $compile) {
    return {
        restrict: "A",
        replace: !0,
        controller: function($scope, $element, $attrs) {
            function touchSection() {
                var currentSection = $popupScope.sections[$popupScope.currentSection.section];
                currentSection.dynLoad ? ($popupScope.dynamic = !0, currentSection.loaded ? "function" == typeof $scope[currentSection.dynOnOpen] && $scope[currentSection.dynOnOpen]({
                    section: $popupScope.currentSection.section
                }) : $http.get(currentSection.dynLoad).success(function(response) {
                    currentSection.loaded = !0, currentSection.content = $sce.trustAsHtml(response), 
                    "function" == typeof $scope[currentSection.dynOnLoad] && $scope[currentSection.dynOnLoad]({
                        response: response,
                        section: $popupScope.currentSection.section
                    });
                })) : $popupScope.dynamic = !1;
            }
            if ("popup-section" === $element[0].tagName.toLowerCase()) {
                var $popupScope = $element.parent().scope();
                $popupScope._dynLoadInited || ($popupScope._dynLoadInited = !0, $popupScope.$watch("visible", function(visible) {
                    visible && touchSection();
                }), $popupScope.$watch("currentSection", function() {
                    $popupScope.visible && touchSection();
                }));
            } else ($element.hasClass("popup") || $element.hasClass("dropdown")) && ($scope.dynamic = !0, 
            $scope.$watch("visible", function(visible) {
                visible && ($scope.loaded ? "function" == typeof $scope[$attrs.dynOnOpen] && $scope[$attrs.dynOnOpen]({}) : $http.get($attrs.dynLoad).success(function(response) {
                    $scope.loaded = !0, $scope.content = $sce.trustAsHtml(response), $compile(response)($scope, function(res) {
                        $timeout(function() {
                            $scope.content = $sce.trustAsHtml(res.html());
                        });
                    }), "function" == typeof $scope[$attrs.dynOnLoad] && $scope[$attrs.dynOnLoad]({
                        response: response
                    });
                }));
            }));
        }
    };
}), actiGuide.mainModule.directive("form", function() {
    return {
        require: "form",
        restrict: "E",
        link: function($scope, $element, $attrs, formCtrl) {
            formCtrl && angular.forEach(formCtrl, function(item) {
                if (angular.isObject(item) && item.$name) {
                    var control = $element.find('[name="' + item.$name + '"]');
                    item.$element = control, control.on("focusout", function() {
                        var errorReason;
                        if (angular.forEach(item.$error, function(value, reason) {
                            value === !0 && "required" !== reason && (errorReason = reason);
                        }), errorReason ? ($scope.$apply(item.$error.showError = errorReason), $(this).addClass("invalid")) : ($scope.$apply(item.$error.showError = !1), 
                        $(this).removeClass("invalid")), item.$warnings) {
                            var warningReason;
                            angular.forEach(item.$warnings, function(value, reason) {
                                value === !0 && (warningReason = reason);
                            }), $scope.$apply(warningReason ? item.$warnings.showWarning = warningReason : item.$warnings.showWarning = !1);
                        }
                    });
                }
            });
        }
    };
}), actiGuide.mainModule.directive("hint", function($timeout) {
    return {
        restrict: "A",
        priority: 1e3,
        link: function($scope, $element, $attrs) {
            var timeoutPromise, hint = $("<div>", {
                "class": "hint-text",
                html: $attrs.hint
            }).appendTo("body");
            $element.on("mouseover.hints", function() {
                var position = $element.offset();
                timeoutPromise = $timeout(function() {
                    hint.css({
                        top: position.top - hint.innerHeight() - 15,
                        left: position.left,
                        display: "block"
                    });
                }, 700);
            }), $element.on("mouseleave.hints", function() {
                $timeout.cancel(timeoutPromise), hint.css({
                    display: "none"
                });
            }), $scope.$on("$destroy", function() {
                $element.off("mouseover.hints").off("mouseleave.hints"), hint.remove();
            });
        }
    };
}), actiGuide.mainModule.directive("jsPlaceholder", function() {
    return {
        restrict: "A",
        link: function($scope, $element, $attrs) {
            var parent = $element.parents("form").length ? $element.parents("form") : "body";
            $element.on("click", function() {
                $('[name="' + $attrs.jsPlaceholder + '"]', parent).focus();
            });
        }
    };
}), actiGuide.mainModule.directive("moneyField", function($sniffer, $browser, $timeout, $filter, $caretPosition) {
    return {
        restrict: "EA",
        require: "ngModel",
        scope: !0,
        link: function(scope, element, attrs, ngModelCtrl) {
            scope.showKop = attrs.showKop, scope.atm = attrs.qa;
            var inputRub = element.find("input:first"), inputKop = element.find("input:last"), spanRub = inputRub.next("span"), spanKop = inputKop.next("span"), inputs = element.find("input");
            attrs.required && inputRub.attr("required", "required"), ngModelCtrl.$render = function() {
                if (ngModelCtrl.$viewValue) {
                    ngModelCtrl.$viewValue = Math.ceil(100 * ngModelCtrl.$viewValue) / 100;
                    var value = String(ngModelCtrl.$viewValue).split(".");
                    inputRub.val($filter("currency")(value[0])), value[1] ? (value[1] = 1 == value[1].length ? value[1] + "0" : value[1], 
                    inputKop.val(value[1])) : inputKop.val("");
                } else inputRub.val(""), inputKop.val("");
            };
            var listener = function() {
                var kop = inputKop.val(), rub = inputRub.val(), totalValue = (rub ? rub : kop && kop > 0 ? "0" : "") + (kop && kop > 0 ? "." + (kop.length > 1 ? kop : "0" + kop) : "");
                ngModelCtrl.$viewValue != parseFloat(totalValue) && scope.$apply(function() {
                    ngModelCtrl.$setViewValue(parseFloat(totalValue.replace(/\s/g, "")));
                });
            };
            if ($sniffer.hasEvent("input")) inputs.on("input", listener); else {
                var timeout, deferListener = function() {
                    timeout || (timeout = $browser.defer(function() {
                        listener(), timeout = null;
                    }));
                };
                inputs.on("keydown", function(event) {
                    var key = event.keyCode;
                    91 === key || key > 15 && 19 > key || key >= 37 && 40 >= key || deferListener();
                }), inputs.on("change", listener), $sniffer.hasEvent("paste") && inputs.on("paste cut", deferListener);
            }
            inputRub.on("keydown", function(event) {
                if (scope.showKop) {
                    var key = event.keyCode, caretPosition = $caretPosition.get(this), valueLength = this.value.length;
                    39 == key && caretPosition == valueLength && $timeout(function() {
                        $caretPosition.$set(inputKop, 0);
                    }, 1);
                }
            }), inputKop.on("keydown", function(event) {
                var key = event.keyCode, caretPosition = $caretPosition.get(this);
                37 == key && 0 == caretPosition && $timeout(function() {
                    $caretPosition.$set(inputRub, inputRub.val().length);
                }, 1);
            }), element.on("focus", function() {
                inputRub.focus();
            }), spanRub.on("click", function() {
                inputRub.focus();
            }), spanKop.on("click", function() {
                inputKop.focus();
            }), "disabled" in attrs && inputs.attr("disabled", "disabled"), "readonly" in attrs && inputs.attr("readonly", "readonly"), 
            "id" in attrs && (inputRub.attr("id", attrs.id + "_Rub"), inputKop.attr("id", attrs.id + "_Kop")), 
            "name" in attrs && (inputRub.attr("name", attrs.name + ".Rub"), inputKop.attr("name", attrs.name + ".Kop")), 
            attrs.ngDisabled && scope.$watch(attrs.ngDisabled, function(newValue) {
                inputs.attr("disabled", newValue);
            }), attrs.ngReadonly && scope.$watch(attrs.ngReadonly, function(newValue) {
                inputs.attr("readonly", newValue);
            });
        },
        template: '<div class="dib t-input-money"><input type="text" class="t-input ctrl__sim3 first m-none" data-modifier=\'["RegExpFilter:[^\\\\d]", "Money"]\' maxlength="11" data-check-range="0" autocomplete="off" data-qa="{{ atm }}.Rub"><span class="ctrl__sim3">Руб</span><input type="text" data-ng-show="showKop" class="t-input t-input__mini ctrl__sim3 last m-none" data-modifier=\'["RegExpFilter:[^\\\\d]"]\' maxlength="2" autocomplete="off" data-qa="{{ atm }}.Kop"><span data-ng-show="showKop" class="ctrl__sim3">Коп</span></div>',
        replace: !0
    };
}), actiGuide.mainModule.directive("navList", function() {
    return {
        restrict: "C",
        link: function(scope, element) {
            if (!element.hasClass("select-dropdown")) {
                var listItems = $("li:not(.list-title, .list-subtitle, .disabled)", element);
                listItems.click(function() {
                    listItems.removeClass("active"), $(this).addClass("active");
                }), listItems.on("mousedown", function() {
                    $(this).addClass("pushed");
                }).on("mouseup mouseout", function() {
                    $(this).removeClass("pushed");
                });
            }
        }
    };
}), actiGuide.mainModule.directive("popupCaller", function(layers) {
    return {
        restrict: "A",
        scope: !1,
        link: function(scope, element, attrs) {
            angular.element(element).data("popupCaller", !0), function(attrs) {
                element.bind("click", function() {
                    var popupElement = document.getElementById(attrs.popupCaller), popupScope = angular.element(popupElement).scope();
                    layers.layersList.length > 0 && !layers.isDownInTree(this) || (scope.noScroll = !0, 
                    popupScope.visible = !0, layers.layersList.push(popupElement), angular.element(element).data("targetPopup", popupElement), 
                    popupScope.$apply());
                });
            }(attrs);
        }
    };
}), actiGuide.mainModule.directive("popup", function() {
    return {
        restrict: "E",
        transclude: !0,
        templateUrl: "templates/popup.html",
        replace: !0,
        scope: !0,
        controller: function($scope, $element, $attrs) {
            if ($scope.visible = !1, $attrs.popupConfig) {
                var conf = JSON.parse($attrs.popupConfig);
                for (var i in conf) conf.hasOwnProperty(i) && ($scope[i] = conf[i]);
            }
            $scope.menu && !$scope.currentSection && ($scope.currentSection = $scope.menu[0]), 
            $scope.setSection = function() {
                "divider" !== this.item.type && ($scope.currentSection = this.item);
            };
        }
    };
}).directive("popupSection", function($sce) {
    return {
        restrict: "E",
        controller: function($scope, $element, $attrs) {
            var $parent = angular.element($element).parent(), $parentScope = $parent.scope();
            $parentScope.sections || ($parentScope.sections = {}), $parentScope.sections[$attrs.target] || ($parentScope.sections[$attrs.target] = {}), 
            $parentScope.sections[$attrs.target].content = $sce.trustAsHtml($element.html());
            var portAttrs = [ "dynLoad", "dynOnLoad", "dynOnOpen" ];
            for (var i in portAttrs) portAttrs.hasOwnProperty(i) && $attrs[portAttrs[i]] && ($parentScope.sections[$attrs.target][portAttrs[i]] = $attrs[portAttrs[i]]);
        }
    };
}), actiGuide.mainModule.directive("select", function() {
    return {
        require: "?ngModel",
        restrict: "E",
        link: function($scope, $element, $attrs, ctrl) {
            var autofocus;
            if ($attrs.autofocus && (autofocus = function() {
                $("#" + $attrs.autofocus).focus();
            }), $attrs.autofocusList && (autofocus = function() {
                $($attrs.autofocusList).filter(":visible:first").focus();
            }), $element.coreUISelect({
                onClose: autofocus ? autofocus : null,
                onChange: $attrs.change ? $scope[$attrs.change] : null
            }), ctrl) {
                var origRender = ctrl.$render;
                ctrl.$render = function() {
                    return origRender(), $element.coreUISelect("update");
                };
            }
            if ($attrs.ngOptions) {
                var optionList = $attrs.ngOptions.slice($attrs.ngOptions.lastIndexOf(" "));
                return $scope.$watch(optionList, function(newValue) {
                    newValue && $element.coreUISelect("update");
                }, !0);
            }
        }
    };
}), actiGuide.mainModule.directive("splitFields", function($caretPosition, $timeout) {
    return {
        restrict: "A",
        priority: 900,
        link: function(scope, element) {
            var fields = element.find("input:visible");
            fields.length < 2 || fields.each(function(index, item) {
                $(item).on("keydown", function(event) {
                    var key = event.keyCode, caretPosition = $caretPosition.get(this), valueLength = this.value.length;
                    39 == key && caretPosition == valueLength && fields[index + 1] && $timeout(function() {
                        $caretPosition.set(fields[index + 1], 0);
                    }, 1), 37 == key && 0 == caretPosition && fields[index - 1] && $timeout(function() {
                        $caretPosition.set(fields[index - 1], fields[index - 1].value.length);
                    }, 1);
                });
            });
        }
    };
}), actiGuide.mainModule.directive("tabs", function(VIEWS_PATH) {
    return {
        restrict: "E",
        transclude: !0,
        scope: {
            modelValue: "=ngModel"
        },
        controller: function($scope) {
            var tabs = $scope.tabs = [], tabElements = $scope.tabElements = [];
            $scope.select = function(tab) {
                angular.forEach(tabs, function(tab) {
                    tab.selected = !1;
                }), tab.selected = !0, angular.isDefined(tab.modelValue) ? $scope.modelValue = tab.modelValue : tab.handler && tab.handler();
            }, $scope.selectByValue = function() {
                var tab;
                angular.forEach(tabs, function(item) {
                    item.selected = !1, "true" === item.modelValue && (item.modelValue = !0), "false" === item.modelValue && (item.modelValue = !1), 
                    item.modelValue === $scope.modelValue && (tab = item);
                }), tab && (tab.selected = !0, tab.handler && tab.handler());
            }, this.addTab = function(tab, element, isDefault) {
                0 == tabs.length && $scope.select(tab), isDefault && $scope.select(tab), tabs.push(tab), 
                tabElements.push(element);
            };
        },
        link: function($scope, $element, $attrs) {
            $attrs.ngModel && $scope.$watch("modelValue", function() {
                $scope.selectByValue();
            }), console.log($scope.tabElements), $("button", $element).each(function(index, item) {
                console.log($(item).width());
            });
        },
        templateUrl: VIEWS_PATH + "tabs.html",
        replace: !0
    };
}).directive("tab", function() {
    return {
        require: "^tabs",
        restrict: "E",
        transclude: !0,
        scope: {
            title: "@",
            handler: "&",
            isDefault: "@",
            modelValue: "@"
        },
        link: function(scope, element, attrs, tabsCtrl) {
            tabsCtrl.addTab(scope, element, attrs.isDefault);
        },
        template: '<div data-ng-show="selected" data-ng-transclude></div>',
        replace: !0
    };
}), actiGuide.mainModule.directive("tipBox", function(VIEWS_PATH) {
    return {
        restrict: "E",
        scope: !0,
        replace: !0,
        transclude: !0,
        link: function(scope, element, attr) {
            scope.showCloseBtn = attr.closeBtn, scope.hideTip = function() {
                scope.hideTipBox = !0;
            };
        },
        templateUrl: VIEWS_PATH + "tipbox.html"
    };
}), actiGuide.mainModule.directive("modifier", function($filter, $caretPosition) {
    var caretPositionController = function(textField, value) {
        this._textField = textField, void 0 !== value && (this._textField.value = value), 
        this._value = this._textField.value, this._caretPosition = $caretPosition.get(this._textField), 
        this.getValue = function() {
            return this._value;
        }, this.append = function(position, string) {
            this._caretPosition >= position && (this._caretPosition += string.length), this._value = this._value.substring(0, position) + string + this._value.substring(position);
        }, this.remove = function(position, count) {
            this._caretPosition > position + count ? this._caretPosition -= count : this._caretPosition > position && (this._caretPosition = position), 
            isNaN(count) && (count = this._value.length - position), this._value = this._value.substring(0, position) + this._value.substring(position + count);
        }, this.replace = function(pattern, replacer) {
            this._replaceWith = angular.isFunction(replacer) ? replacer : function() {
                return replacer;
            }, this._replacePositionOffset = 0, this._value.replace(pattern, this._replaceHandler);
        }, this._replaceHandlerSource = function(substring) {
            var replaceWith = this._replaceWith.apply(null, arguments), position = arguments[arguments.length - 2] - this._replacePositionOffset, removeCount = substring.length;
            this.remove(position, removeCount), this._replacePositionOffset += removeCount, 
            this.append(position, replaceWith);
        }, this._replaceHandler = this._replaceHandlerSource.bind(this), this._replaceWith = null, 
        this._replacePositionOffset = null, this.mask = function(mask, maskedChar) {
            mask = String(mask), maskedChar = maskedChar || "x";
            var maskChar, valueChar, maskedValue = "", valueCursor = 0, maskCursor = 0, originCaretPosition = this._caretPosition;
            if (this._value.length > 0) for (;maskCursor < mask.length && valueCursor < this._value.length; ) maskChar = mask.charAt(maskCursor++), 
            valueChar = this._value.charAt(valueCursor), maskChar == maskedChar || maskChar == valueChar ? this._value.length > valueCursor && (maskedValue += this._value.charAt(valueCursor++)) : (maskedValue += maskChar, 
            originCaretPosition > valueCursor && this._caretPosition++);
            this._value = maskedValue;
        }, this.updateCaretPosition = function() {
            $caretPosition.set(this._textField, this._caretPosition);
        }, this.getCaretPosition = function() {
            return this._caretPosition;
        };
    }, modifierTypes = {
        RegExpFilter: function(option, element) {
            if (option) {
                var regExpGlobal = (new RegExp(option), new RegExp(option, "g"));
                this.modify = function(value) {
                    value.replace(regExpGlobal, "");
                };
            }
        },
        Mask: function(option) {
            this.modify = function(value) {
                value.mask(option);
            };
        },
        DigitMask: function(option, element, ngModelCtrl) {
            var _this = this;
            this.modify = function(value) {
                value.mask(option);
            }, ngModelCtrl.$parsers.unshift(function(viewValue) {
                return viewValue ? viewValue = $filter("getDigits")(viewValue) : viewValue;
            }), ngModelCtrl.$formatters.unshift(function(modelValue) {
                if (!modelValue) return modelValue;
                var value = new caretPositionController(element.get(0), modelValue);
                return _this.modify(value), value.getValue();
            });
        },
        Money: function(option, element, ngModelCtrl) {
            this.modify = function(value) {
                var string = value.getValue();
                string = $filter("getDigits")(string), string = $filter("currency")(string), value.remove(0), 
                value.append(0, string);
            }, ngModelCtrl && (ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue ? viewValue = $filter("getDigits")(viewValue) : viewValue;
            }), ngModelCtrl.$formatters.push(function(modelValue) {
                return modelValue ? modelValue = $filter("currency")(modelValue) : modelValue;
            }));
        },
        Decimal: function(option, element, ngModelCtrl) {
            this.modify = function(value) {
                var string = value.getValue();
                (string > 1e6 || "1000000." === string || "1000000," === string || !/^\d{1,7}([\.,])?$/.test(string) && !/^\d{1,7}([\.,]\d{1,3})?$/.test(string)) && value.remove(string.length - 1);
                var separator = -1 == value.getValue().indexOf(",") ? "." : ",";
                string = value.getValue().split(separator), string[0] = string[0].replace("s", ""), 
                string[0] = $filter("currency")(string[0]), value.remove(0), value.append(0, string.join(separator));
            }, element.on("focusout", function() {
                var value = $(this).val();
                "" != value && -1 != value.indexOf(",") && (ngModelCtrl.$setViewValue(value.replace(",", ".")), 
                $(this).val(value.replace(",", ".")));
            }), ngModelCtrl && (ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue ? parseFloat(viewValue.replace(/\s/g, "")) : viewValue;
            }), ngModelCtrl.$formatters.push(function(modelValue) {
                return modelValue ? modelValue : modelValue;
            }));
        },
        Range: function(option, element, ngModelCtrl) {
            option = option.split("-"), element.on("focusout", function() {
                var value = $(this).val();
                "" != value && option[0] > parseFloat(value) && (ngModelCtrl.$setViewValue(String(option[0])), 
                $(this).val(option[0]));
            }), this.modify = function(value) {
                var gValue = value.getValue();
                gValue = gValue.replace(",", "."), option[1] < parseFloat(gValue) && value.replace(value.getValue(), String(option[1])), 
                option[0].length == gValue.length && option[0] > parseFloat(gValue) && "" != gValue && value.replace(value.getValue(), String(option[0]));
            };
        },
        RangeFloat: function(option, element, ngModelCtrl) {
            option = option.split("-"), element.on("focusout", function() {
                var value = $(this).val();
                "" != value && option[0] > parseFloat(value) && (ngModelCtrl.$setViewValue(String(option[0])), 
                $(this).val(option[0]));
            }), this.modify = function(value) {
                var gValue = value.getValue();
                option[1] <= parseFloat(gValue) && value.replace(value.getValue(), String(option[1])), 
                option[0].length == gValue.length && option[0] >= parseFloat(gValue) && "" != gValue && value.replace(value.getValue(), String(option[0]));
                var parsegValue = gValue.split(/[.,]/);
                (parsegValue[1] && parsegValue[1].length > option[2] || 3 == parsegValue.length) && value.replace(value.getValue(), gValue.substr(0, gValue.length - 1));
            };
        },
        EnToRu: function(option, element) {
            this.lastEvent || element.on("keydown", function(event) {
                this.lastEvent = event;
            }.bind(this)), this.apostrophePosition = [], this.enToRuDictionary = {
                q: "й",
                w: "ц",
                e: "у",
                r: "к",
                t: "е",
                y: "н",
                u: "г",
                i: "ш",
                o: "щ",
                p: "з",
                a: "ф",
                s: "ы",
                d: "в",
                f: "а",
                g: "п",
                h: "р",
                j: "о",
                k: "л",
                l: "д",
                z: "я",
                x: "ч",
                c: "с",
                v: "м",
                b: "и",
                n: "т",
                m: "ь",
                Q: "Й",
                W: "Ц",
                E: "У",
                R: "К",
                T: "Е",
                Y: "Н",
                U: "Г",
                I: "Ш",
                O: "Щ",
                P: "З",
                A: "Ф",
                S: "Ы",
                D: "В",
                F: "А",
                G: "П",
                H: "Р",
                J: "О",
                K: "Л",
                L: "Д",
                Z: "Я",
                X: "Ч",
                C: "С",
                V: "М",
                B: "И",
                N: "Т",
                M: "Ь"
            }, this.lastEvent = !1, this.modify = function(value) {
                function substituteSymbol(symbol) {
                    value.remove(value.getCaretPosition() - 1, 1), value.append(value.getCaretPosition(), symbol), 
                    self.busy = !1;
                }
                var self = this, preLastSymbol = value._value[value._caretPosition - 2], lastSymbol = value._value[value._caretPosition - 1], lastSymbolCode = lastSymbol && lastSymbol.charCodeAt(0);
                $(value._textField).off("keypress").on("keypress", function(e) {
                    self.lastKeypressCode = e.keyCode;
                }.bind(this)), self.lastKeypressCode || (self.lastKeypressCode = lastSymbolCode), 
                this.lastKeydownCode || $(value._textField).on("keydown", function(e) {
                    this.lastKeydownCode = e.keyCode;
                }.bind(this)), (self.lastKeypressCode >= 65 && self.lastKeypressCode <= 90 || self.lastKeypressCode >= 97 && self.lastKeypressCode <= 122) && (self.suggestedLayout = "en"), 
                (self.lastKeypressCode >= 1040 && self.lastKeypressCode <= 1071 || self.lastKeypressCode >= 1072 && self.lastKeypressCode <= 1103) && (self.suggestedLayout = "ru"), 
                ("ru" === self.suggestedLayout && "," === lastSymbol || "ru" === self.suggestedLayout && "'" === lastSymbol || "ru" === self.suggestedLayout && '"' === lastSymbol) && (self.suggestedLayout = "en");
                var layoutChanged = self.prevLayout && self.prevLayout != self.suggestedLayout;
                8 != this.lastKeydownCode && (";" === lastSymbol ? substituteSymbol("ж") : ":" === lastSymbol ? substituteSymbol("Ж") : ">" === lastSymbol ? substituteSymbol("Ю") : "." === lastSymbol && "en" === self.suggestedLayout ? substituteSymbol("ю") : "," === lastSymbol ? substituteSymbol("б") : "<" === lastSymbol ? substituteSymbol("Б") : "`" === lastSymbol ? substituteSymbol("ё") : "~" === lastSymbol ? substituteSymbol("Ё") : "]" === lastSymbol ? substituteSymbol("ъ") : "}" === lastSymbol ? substituteSymbol("Ъ") : "[" === lastSymbol ? substituteSymbol("х") : "{" === lastSymbol ? substituteSymbol("Х") : "'" === lastSymbol ? substituteSymbol("э") : 50 !== self.lastKeydownCode && '"' === lastSymbol ? substituteSymbol("Э") : "@" === lastSymbol ? substituteSymbol('"') : (value.replace(/[a-zA-Z]/g, function(x) {
                    return self.enToRuDictionary[x];
                }), self.busy = !1)), !(value._caretPosition > 1 && layoutChanged) || preLastSymbol && "'" == preLastSymbol || "'" !== lastSymbol && "э" !== lastSymbol && '"' !== lastSymbol && "Э" !== lastSymbol || "'" == value._value[value._caretPosition] || "'" == value._value[value._caretPosition - 1] || substituteSymbol("'"), 
                self.prevLayout = self.suggestedLayout;
            };
        },
        Telefon: function(option, element, ngModelCtrl) {
            var _this = this;
            this.prefix = "8 ", this.modify = function(value) {
                value.replace(/[^\d]/g, ""), value.replace(/^8/, ""), value.mask("xxx xxx-xx-xx"), 
                value.append(0, "8 ");
            }, ngModelCtrl.$parsers.unshift(function(viewValue) {
                return viewValue ? viewValue !== _this.prefix && viewValue !== _this.prefix.slice(0, _this.prefix.length - 1) ? $filter("getDigits")(viewValue.replace(_this.prefix, "")) : void 0 : viewValue;
            }), ngModelCtrl.$formatters.unshift(function(modelValue) {
                modelValue = _this.prefix + (angular.isString(modelValue) ? modelValue : "");
                var value = new caretPositionController(element.get(0), modelValue);
                return _this.modify(value), value.getValue();
            });
        },
        FirstLetter: function() {
            this.modify = function(value) {
                value.replace(/^\s*([a-zа-я])/g, function($1) {
                    return $1.toUpperCase();
                });
            };
        }
    };
    return {
        require: "?ngModel",
        link: function(scope, element, attrs, ngModelCtrl) {
            function addModifier(type) {
                type = type.split(":"), element.modifierList.push(new modifierTypes[type[0]](type[1], element, ngModelCtrl));
            }
            var modifiers = element.data("modifier");
            element.modifierList = [], angular.isArray(modifiers) && angular.forEach(modifiers, addModifier), 
            angular.isArray(element.modifierList) && element.on("input", function() {
                var value = new caretPositionController(this);
                angular.forEach(element.modifierList, function(modifier) {
                    var originValue = value.getValue();
                    modifier.modify(value), originValue !== value.getValue() && scope.$apply(function() {
                        element.val(value.getValue()), value.updateCaretPosition(), ngModelCtrl && ngModelCtrl.$setViewValue(value.getValue());
                    });
                });
            });
        }
    };
}), actiGuide.mainModule.directive("checkRange", function() {
    var checkRange = function(value, min, max) {
        return value = parseFloat(value), min = parseFloat(min), max = parseFloat(max), 
        isNaN(value) ? !0 : isNaN(min) || isNaN(max) ? isNaN(min) ? isNaN(max) ? void 0 : max > value : value > min : value > min && max > value;
    };
    return {
        require: "^ngModel",
        link: function(scope, elm, attrs, ngModelCtrl) {
            var params = attrs.checkRange;
            params && !elm.parent().data("zero-able") && (params = params.split("-"), ngModelCtrl.$parsers.unshift(function(viewValue) {
                return ngModelCtrl.$setValidity("checkRange", checkRange(viewValue, params[0], params[1])), 
                viewValue;
            }), ngModelCtrl.$formatters.unshift(function(modelValue) {
                return ngModelCtrl.$setValidity("checkRange", checkRange(modelValue, params[0], params[1])), 
                modelValue;
            }));
        }
    };
}), actiGuide.mainModule.directive("validationTip", function() {
    return {
        restrict: "A",
        link: function($scope, $element) {
            var parent = $element.parents("form").get(0) || $element.parents(".popup-modal").get(0) || $("body");
            $element.on("click", function() {
                $scope.$apply($scope.showTip = !0), $("input.ng-invalid, textarea.ng-invalid, div.ng-invalid:not(.disabled) input", parent).not(":hidden, .disabled").first().focus();
            });
        }
    };
}), actiGuide.mainModule.directive("validationTip", function(VIEWS_PATH) {
    return {
        priority: 900,
        require: "^form",
        scope: !0,
        restrict: "E",
        replace: !0,
        link: function($scope, $element, $attrs, formCtrl) {
            formCtrl && ($scope.tips = $scope.tips ? $scope.tips : [], angular.forEach(formCtrl, function(item) {
                if (angular.isObject(item) && item.$name) {
                    var tipText = item.$element ? item.$element.data("val-tip") : null;
                    if (tipText) {
                        $scope.tips.push({
                            $elName: item.$name,
                            $element: item.$element,
                            title: tipText,
                            showTip: item.$invalid
                        });
                        var currentIndex = $scope.tips.length - 1;
                        $scope.$watch(formCtrl.$name + "." + item.$name + ".$invalid", function(newValue) {
                            $scope.tips[currentIndex].showTip = newValue;
                            var isInvalid = !1;
                            angular.forEach($scope.tips, function(tip) {
                                tip.showTip === !0 && (isInvalid = !0);
                            }), $scope.isInvalid = isInvalid;
                        });
                    }
                }
            }), $scope.$on("tipsChanged", function() {
                var isInvalid = !1;
                angular.forEach($scope.tips, function(tip) {
                    tip.showTip === !0 && (isInvalid = !0);
                }), $scope.isInvalid = isInvalid;
            }), $scope.focusTo = function(tip) {
                return tip.href ? void $scope[tip.href]($scope.popup) : void (tip.$element && (angular.isString(tip.$element) ? $(tip.$element).first().focus() : tip.$element.focus()));
            });
        },
        templateUrl: VIEWS_PATH + "validationtip.html"
    };
}), actiGuide.mainModule.filter("currency", function() {
    return function(value, format) {
        return value ? (value = String(value).replace(",", "."), value = Math.ceil(100 * value) / 100, 
        value = String(value).split("."), value[1] && (value[1] = 1 == value[1].length ? value[1] + "0" : value[1]), 
        "full" === format ? value[0].replace(/(\d)(?=(?:\d{3})+$)/g, "$1 ") + " руб" + (+value[1] ? " " + value[1] + " коп" : "") : value[0].replace(/(\d)(?=(?:\d{3})+$)/g, "$1 ") + (+value[1] ? "," + value[1] : "")) : value;
    };
}), actiGuide.mainModule.filter("getDigits", function() {
    return function(value) {
        return value && String(value).match(/\d/g) ? String(value).match(/\d/g).join("") || "" : value;
    };
}), actiGuide.mainModule.service("alertBox", function($timeout) {
    return {
        push: function(text, config) {
            var additionalClasses = "";
            config || (config = {}), 0 === document.getElementsByClassName("alert-box-wrap").length && angular.element(document.getElementsByTagName("BODY")).append('<div class="alert-box-wrap">'), 
            config.color && (additionalClasses += " " + config.color);
            var element = angular.element('<div class="alert-box' + additionalClasses + '">' + text + "</div>");
            config.target ? angular.element(document.getElementById(config.target)).html(element) : angular.element(document.getElementsByClassName("alert-box-wrap")).append(element), 
            $timeout(function() {
                element.addClass("opened");
            });
            var timeout = $timeout(function() {
                angular.element(element).removeClass("opened");
            }, config.timeout ? config.timeout : 3e3);
            element.on("mouseover", function() {
                $timeout.cancel(timeout);
            }), element.on("mouseout", function() {
                timeout = $timeout(function() {
                    angular.element(element).removeClass("opened");
                }, config.timeout ? config.timeout : 3e3);
            });
        }
    };
}), actiGuide.mainModule.factory("$caretPosition", function() {
    function getCaretPosition(element) {
        return element ? element.selectionStart : null;
    }
    function getCaretPositionForIe(element) {
        if (!element) return null;
        element.focus();
        var selection = document.selection.createRange();
        return selection.moveStart("character", -element.value.length), selection.text.length;
    }
    function setCaretPosition(element, position) {
        if (!element) return !1;
        element.focus();
        try {
            element.setSelectionRange(position, position);
        } catch (e) {}
        return !0;
    }
    function setCaretPositionForIe(element, position) {
        if (!element) return !1;
        if (!position) return !1;
        element.focus();
        var range = element.createTextRange();
        return range.collapse(!0), range.moveEnd("character", position), range.moveStart("character", position), 
        range.select(), !0;
    }
    function $getCaretPosition($element) {
        return this.get($element.get(0));
    }
    function $setCaretPosition($element, position) {
        return this.set($element.get(0), position);
    }
    return {
        get: "selection" in document ? getCaretPositionForIe : getCaretPosition,
        set: document.createElement("input").createTextRange ? setCaretPositionForIe : setCaretPosition,
        $get: $getCaretPosition,
        $set: $setCaretPosition
    };
}), actiGuide.mainModule.service("layers", [ "$document", function($document) {
    function updateLayers(element) {
        _layers.length > 0 && (angular.element(element).hasClass("pop-on-click") || !angular.element(element).data("popupCaller") && !isUpInTree(element) || angular.element(element).data("popupCaller") && !isDownInTree(angular.element(element).data("targetPopup")) || angular.element(element).hasClass("dropdown_container") && !isDownInTree(element, angular.element(_layers[_layers.length - 1]))) && (angular.element(_layers[_layers.length - 1]).hasClass("popup") && (angular.element($document[0].body).scope().noScroll = !1), 
        popLastLayer());
    }
    function isUpInTree(element) {
        return _layers.indexOf(angular.element(element)[0]) > -1 ? !0 : "HTML" !== angular.element(element).parent()[0].tagName ? isUpInTree(angular.element(element).parent()) : !1;
    }
    function isDownInTree(element, tree) {
        var found = !1;
        tree || (tree = _layers);
        var dig = function(element, tree) {
            angular.forEach(tree, function(item) {
                return item == element ? (found = !0, !0) : dig(element, angular.element(item).children());
            });
        };
        return dig(element, tree), found;
    }
    function popLastLayer() {
        var $topLayer = angular.element(_layers[_layers.length - 1]), topLayerScope = $topLayer.scope();
        topLayerScope.visible = !1, topLayerScope.$apply(), _layers.pop();
    }
    var _layers = [];
    return angular.element($document).bind("click", function(e) {
        updateLayers(e.target);
    }), angular.element($document).bind("keyup", function(e) {
        27 == e.which && _layers.length > 0 && popLastLayer();
    }), {
        layersList: _layers,
        updateLayers: updateLayers,
        isUpInTree: isUpInTree,
        isDownInTree: isDownInTree,
        popLastLayer: popLastLayer
    };
} ]), actiGuide.mainModule.constant("VIEWS_PATH", "js/app/modules/main/directives/views/"), 
function(ng, app) {
    app.service("ranges", [ "$rootScope", function($rootScope) {
        return new RangesService($rootScope);
    } ]);
    var DATE_FORMAT = "D.M.YYYY", RangesService = (moment(), function($scope) {
        function addRange(range) {
            return RANGES.push(range), range;
        }
        function getActiveRangeForDatepicker(datepicker, date_selected) {
            var _ranges = getRangesForDatepicker(datepicker), date_selected = date_selected ? moment(date_selected, DATE_FORMAT).toDate() : !1, result = {};
            _ranges.sort(function(a, b) {
                return b.to.diff(b.from) > a.to.diff(a.from);
            });
            for (var __ranges = _ranges, i = 0, till = _ranges.length; i < _ranges.length; i++) for (var range1 = _ranges[i], j = i + 1; till > j; j++) {
                var range2 = _ranges[j];
                (range2.from.isSame(range1.from) || range2.from.isAfter(range1.from)) && (range2.to.isSame(range1.to) || range2.to.isBefore(range1.to)) && (__ranges = _.without(__ranges, range2));
            }
            if (_ranges = __ranges, _ranges.sort(function(a, b) {
                var result = 0;
                return result = a.from.diff(b.from) < 0 ? -1 : a.from.isSame(b.from) && a.to.diff(b.to) < 0 ? -1 : 1;
            }), date_selected && !_ranges[0].from.isSame(RANGE_MIN_VAL) && date_selected > RANGE_MIN_VAL.toDate() && date_selected < _ranges[0].from.toDate()) return result.from = RANGE_MIN_VAL.clone(), 
            result.to = _ranges[0].from.clone(), result;
            for (var i = 0, till = _ranges.length - 1; till > i; i++) {
                var range1 = _ranges[i], range2 = _ranges[i + 1];
                if (range1.to.diff(range2.from) < 0) {
                    if (!date_selected) {
                        result.from = range1.to, result.to = range2.from;
                        break;
                    }
                    if (date_selected >= range1.to.toDate() && date_selected <= range2.from.toDate()) {
                        result.from = range1.to, result.to = range2.from;
                        break;
                    }
                    result.from = range2.to;
                } else result.from = range1.to.diff(range2.to) < 0 ? range2.to : range1.from.diff(range2.from) < 0 ? range1.to : range2.to;
            }
            return result.from = result.from ? result.from.clone() : RANGE_MIN_VAL.clone(), 
            result.to = result.to ? result.to.clone() : RANGE_MAX_VAL.clone(), result;
        }
        function broadcastChange() {
            $scope.$broadcast("RangesChanged");
        }
        function removeRange(range) {
            RANGES.splice(RANGES.indexOf(range), 1);
        }
        function flush(type) {
            type = type ? type : void 0;
            var rangesToFlush = [];
            if (type) rangesToFlush = _.filter(RANGES, function(range) {
                return range.type == type;
            }), _.each(rangesToFlush, function(range) {
                range.remove();
            }); else {
                var rangesToFlush = _.filter(RANGES, function(range) {
                    return "default" !== range.type;
                });
                _.each(rangesToFlush, function(range) {
                    range.remove();
                }), broadcastChange();
            }
        }
        function getRangesForDatepicker(name) {
            var result = [];
            return _.each(RANGES, function(range) {
                /datepicker/.test(range.type) ? range.type == "datepicker_" + name && (null === range.from && (range.from = RANGE_MIN_VAL.clone()), 
                null === range.to && (range.to = RANGE_MAX_VAL.clone()), result.push(range)) : result.push(range);
            }), result;
        }
        function isDateSelectable(date) {
            var datepicker = this, result = {
                selectable: !0,
                message: ""
            }, date = moment(date), rangesToCheck = getRangesForDatepicker(datepicker);
            for (var i in rangesToCheck) {
                var range = rangesToCheck[i], _d = date.toDate(), _f = range.from.toDate(), _t = range.to.toDate();
                if (_d >= _f && _t >= _d) {
                    result.selectable = !1, result.message = range.message;
                    break;
                }
            }
            return result;
        }
        function createDependentRange(from, to, type, message) {
            var range = createRange(from, to, type, message);
            return range.type = "datepicker_" + type, range;
        }
        function parseDate(obj) {
            if (null === obj) return "";
            if ("string" == typeof obj) {
                var date, backendStampExp = /^\/Date\((\d+)\)\/$/, dependenceStampExp = /(\d+).(\d+).(\d+)/;
                if (backendStampExp.test(obj)) date = new Date(parseInt(obj.match(backendStampExp)[1], 10)); else if (dependenceStampExp.test(obj)) {
                    var matches = obj.match(dependenceStampExp);
                    date = new Date(matches[3], matches[2] - 1, matches[1]);
                }
                return moment(new Date(date)).startOf("day");
            }
            return moment.isMoment(obj) ? obj.startOf("day") : "";
        }
        function createRange(from, to, type, message) {
            var from = parseDate(from), to = parseDate(to), type = type, message = message;
            return from = "" == from ? RANGE_MIN_VAL.clone() : from, to = "" == to ? RANGE_MAX_VAL.clone() : to, 
            {
                from: from,
                to: to,
                type: type,
                message: message,
                remove: function() {
                    removeRange(this);
                }
            };
        }
        function createBackendRange(_arr) {
            var from = _arr.DateStart, to = _arr.DateEnd, message = _arr.Reason;
            return createRange(from, to, "backend", message);
        }
        function getList() {
            return RANGES;
        }
        function addDefaultBounds() {
            var bounds = [];
            for (var bound in bounds) addRange(bounds[bound]);
        }
        function init() {
            return addDefaultBounds(), {
                addRange: addRange,
                removeRange: removeRange,
                createRange: createRange,
                createBackendRange: createBackendRange,
                broadcastChange: broadcastChange,
                getRangesForDatepicker: getRangesForDatepicker,
                getActiveRangeForDatepicker: getActiveRangeForDatepicker,
                createDependentRange: createDependentRange,
                isDateSelectable: isDateSelectable,
                flush: flush,
                getList: getList
            };
        }
        var RANGES = [], RANGE_MIN_VAL = moment("01.01.1970", DATE_FORMAT), RANGE_MAX_VAL = moment("01.01.2100", DATE_FORMAT);
        return init();
    });
}(angular, actiGuide.mainModule);
//# sourceMappingURL=app.min.map