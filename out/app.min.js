var actiGuide = {}, agGridState = !1;

$(document).keydown(function(e) {
    e && 192 === e.keyCode && e.shiftKey && e.ctrlKey && (agGridState ? (agGridState = !1, 
    $("#in-guidelines").remove()) : (agGridState = !0, $("BODY").append('<div id="in-guidelines"><div id="guidelines"><div class="for-guidelines"><div class="col-edge-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-1"><div class="box"><p class="grid-p"></p></div></div><div class="col-edge-1"><div class="box"><p class="grid-p"></p></div></div><div class="left-padding-grid"></div><div class="right-padding-grid"></div></div></div></div>')));
}), actiGuide.mainModule = angular.module("mainModule", []), actiGuide.mainModule.controller("FormDemoCtrl", function($scope) {
    $scope.Model = {};
}), actiGuide.mainModule.directive("btn", function() {
    return {
        restrict: "C",
        replace: !1,
        transclude: !0,
        template: '<span class="btn-in" data-ng-transclude></span>'
    };
}), actiGuide.mainModule.directive("dropdown", function($window, layers) {
    var ngClasses = "{'is-visible':visible, 'reflect-hor':reflectHorizontal, 'reflect-ver':reflectVertical, 'small-wrap':smallWrap}";
    return {
        restrict: "E",
        transclude: !0,
        template: '<span class="dropdown" ng-class="' + ngClasses + '" ng-transclude />',
        replace: !0,
        scope: !0,
        link: function(scope, element) {
            scope.visible = !1, element.bind("click", function() {
                if (!(layers.layersList.length > 1) || layers.isInTree(this)) {
                    var clickedElement = angular.element(this), clickedElementScope = clickedElement.scope();
                    layers.updateLayers(this), clickedElementScope.visible = !0, layers.layersList.indexOf(this) < 0 && layers.layersList.push(this), 
                    clickedElement[0].offsetWidth < 50 && (scope.smallWrap = !0), clickedElementScope.$apply();
                    var doc = angular.element(document).find("BODY")[0];
                    angular.forEach(clickedElement.children(), function(element) {
                        scope.reflectHorizontal = doc.clientWidth < element.getBoundingClientRect().right, 
                        scope.reflectVertical = doc.clientHeight < element.getBoundingClientRect().bottom, 
                        clickedElementScope.$apply();
                    });
                }
            });
        }
    };
}).directive("dCaller", function() {
    return {
        restrict: "E",
        transclude: !0,
        replace: !0,
        scope: !1,
        template: '<span class="dropdown_caller" ng-transclude />'
    };
}).directive("dContainer", function() {
    return {
        restrict: "E",
        transclude: !0,
        replace: !0,
        scope: !1,
        template: '<span class="dropdown_container" ng-transclude />'
    };
}), actiGuide.mainModule.directive("moneyField", function($sniffer, $browser, $timeout, $filter, $caretPosition) {
    return {
        restrict: "EA",
        require: "ngModel",
        scope: !0,
        link: function(scope, element, attrs, ngModelCtrl) {
            scope.showKop = attrs.showKop, scope.atm = attrs.qa;
            var inputRub = element.find("input:first"), inputKop = element.find("input:last"), spanRub = inputRub.next("span"), spanKop = inputKop.next("span"), inputs = element.find("input");
            attrs.required && inputRub.attr("required", "required"), ngModelCtrl.$render = function() {
                if (ngModelCtrl.$viewValue) {
                    ngModelCtrl.$viewValue = Math.ceil(100 * ngModelCtrl.$viewValue) / 100;
                    var value = String(ngModelCtrl.$viewValue).split(".");
                    inputRub.val($filter("currency")(value[0])), value[1] ? (value[1] = 1 == value[1].length ? value[1] + "0" : value[1], 
                    inputKop.val(value[1])) : inputKop.val("");
                } else inputRub.val(""), inputKop.val("");
            };
            var listener = function() {
                var kop = inputKop.val(), rub = inputRub.val(), totalValue = (rub ? rub : kop && kop > 0 ? "0" : "") + (kop && kop > 0 ? "." + (kop.length > 1 ? kop : "0" + kop) : "");
                ngModelCtrl.$viewValue != parseFloat(totalValue) && scope.$apply(function() {
                    ngModelCtrl.$setViewValue(parseFloat(totalValue.replace(/\s/g, "")));
                });
            };
            if ($sniffer.hasEvent("input")) inputs.on("input", listener); else {
                var timeout, deferListener = function() {
                    timeout || (timeout = $browser.defer(function() {
                        listener(), timeout = null;
                    }));
                };
                inputs.on("keydown", function(event) {
                    var key = event.keyCode;
                    91 === key || key > 15 && 19 > key || key >= 37 && 40 >= key || deferListener();
                }), inputs.on("change", listener), $sniffer.hasEvent("paste") && inputs.on("paste cut", deferListener);
            }
            inputRub.on("keydown", function(event) {
                if (scope.showKop) {
                    var key = event.keyCode, caretPosition = $caretPosition.get(this), valueLength = this.value.length;
                    39 == key && caretPosition == valueLength && $timeout(function() {
                        $caretPosition.$set(inputKop, 0);
                    }, 1);
                }
            }), inputKop.on("keydown", function(event) {
                var key = event.keyCode, caretPosition = $caretPosition.get(this);
                37 == key && 0 == caretPosition && $timeout(function() {
                    $caretPosition.$set(inputRub, inputRub.val().length);
                }, 1);
            }), element.on("focus", function() {
                inputRub.focus();
            }), spanRub.on("click", function() {
                inputRub.focus();
            }), spanKop.on("click", function() {
                inputKop.focus();
            }), "disabled" in attrs && inputs.attr("disabled", "disabled"), "readonly" in attrs && inputs.attr("readonly", "readonly"), 
            "id" in attrs && (inputRub.attr("id", attrs.id + "_Rub"), inputKop.attr("id", attrs.id + "_Kop")), 
            "name" in attrs && (inputRub.attr("name", attrs.name + ".Rub"), inputKop.attr("name", attrs.name + ".Kop")), 
            attrs.ngDisabled && scope.$watch(attrs.ngDisabled, function(newValue) {
                inputs.attr("disabled", newValue);
            }), attrs.ngReadonly && scope.$watch(attrs.ngReadonly, function(newValue) {
                inputs.attr("readonly", newValue);
            });
        },
        template: '<div class="dib t-input-money"><input type="text" class="t-input ctrl__sim3 first m-none" data-modifier=\'["RegExpFilter:[^\\\\d]", "Money"]\' maxlength="11" data-check-range="0" autocomplete="off" data-qa="{{ atm }}.Rub"><span class="ctrl__sim3">Руб</span><input type="text" data-ng-show="showKop" class="t-input t-input__mini ctrl__sim3 last m-none" data-modifier=\'["RegExpFilter:[^\\\\d]"]\' maxlength="2" autocomplete="off" data-qa="{{ atm }}.Kop"><span data-ng-show="showKop" class="ctrl__sim3">Коп</span></div>',
        replace: !0
    };
}), actiGuide.mainModule.directive("navList", function() {
    return {
        restrict: "C",
        link: function(scope, element) {
            var listItems = $("li:not(.list-title, .list-subtitle)", element);
            listItems.click(function() {
                listItems.removeClass("active"), $(this).addClass("active");
            }), listItems.on("mousedown", function() {
                $(this).addClass("pushed");
            }).on("mouseup mouseout", function() {
                $(this).removeClass("pushed");
            });
        }
    };
}), actiGuide.mainModule.directive("popupCaller", function(layers) {
    return {
        restrict: "A",
        scope: !1,
        link: function(scope, element, attrs) {
            !function(attrs) {
                element.bind("click", function() {
                    var popupElement = document.getElementById(attrs.popupCaller), popupScope = angular.element(popupElement).scope();
                    layers.layersList.length > 0 && !layers.isInTree(this) || (scope.noScroll = !0, 
                    popupScope.visible = !0, layers.layersList.indexOf(this) < 0 && (layers.layersList.push(this), 
                    angular.element(element).data("popupElement", popupElement)), popupScope.$apply());
                });
            }(attrs);
        }
    };
}), actiGuide.mainModule.directive("popup", function($document, layers) {
    var ngClasses = "{'is-visible':visible}";
    return {
        restrict: "E",
        transclude: !0,
        template: '<div class="popup" ng-class="' + ngClasses + '" ng-transclude />',
        replace: !0,
        scope: !0,
        link: function(scope, element, attrs) {
            var innerWrapStyle = "";
            scope.visible = !1, element.html("").bind("click", function(e) {
                angular.element(e.target).hasClass("pop-on-click") && (angular.element($document[0].body).scope().noScroll = !1, 
                scope.noScroll = !1, layers.popLastLayer());
            });
            var sections = [ "title", "container" ], collect = "";
            "undefined" == typeof attrs.noCloseButton && (collect += '<div class="close-button pop-on-click"></div>'), 
            parseInt(attrs.popupWidth, 10) > 0 && (innerWrapStyle += "width: " + parseInt(attrs.popupWidth, 10) + "px;"), 
            angular.forEach(sections, function(section) {
                scope[section] && (collect += scope[section]);
            }), element.append('<div class="popup_overflow pop-on-click"></div>'), element.append('<div class="popup_wrap pop-on-click"><div class="popup_inner-wrap" style="' + innerWrapStyle + '">' + collect + "</div></div>");
        }
    };
}).directive("popupTitle", function() {
    return {
        restrict: "E",
        link: function(scope, element) {
            var $element = angular.element(element), $parent = $element.parent(), $parentScope = $parent.scope();
            $parentScope.title = '<div class="popup_title"><h2>' + $element.html() + "</h2></div>";
        }
    };
}).directive("popupContainer", function() {
    return {
        restrict: "E",
        link: function(scope, element, attrs) {
            var $element = angular.element(element), $parent = $element.parent(), $parentScope = $parent.scope(), additionalClasses = "";
            "undefined" != typeof attrs.noPadding && (additionalClasses += " no-padding"), $parentScope.container = '<div class="popup_container' + additionalClasses + '">' + $element.html() + "</div>";
        }
    };
}), actiGuide.mainModule.directive("tipBox", function() {
    return {
        restrict: "E",
        scope: !0,
        replace: !0,
        transclude: !0,
        link: function(scope, element, attr) {
            scope.showCloseBtn = attr.closeBtn, scope.hideTip = function() {
                scope.hideTipBox = !0;
            };
        },
        templateUrl: "tipbox.html"
    };
}), actiGuide.mainModule.filter("currency", function() {
    return function(value, format) {
        return value ? (value = String(value).replace(",", "."), value = Math.ceil(100 * value) / 100, 
        value = String(value).split("."), value[1] && (value[1] = 1 == value[1].length ? value[1] + "0" : value[1]), 
        "full" === format ? value[0].replace(/(\d)(?=(?:\d{3})+$)/g, "$1 ") + " руб" + (+value[1] ? " " + value[1] + " коп" : "") : value[0].replace(/(\d)(?=(?:\d{3})+$)/g, "$1 ") + (+value[1] ? "," + value[1] : "")) : value;
    };
}), actiGuide.mainModule.factory("$caretPosition", function() {
    function getCaretPosition(element) {
        return element ? element.selectionStart : null;
    }
    function getCaretPositionForIe(element) {
        if (!element) return null;
        element.focus();
        var selection = document.selection.createRange();
        return selection.moveStart("character", -element.value.length), selection.text.length;
    }
    function setCaretPosition(element, position) {
        if (!element) return !1;
        element.focus();
        try {
            element.setSelectionRange(position, position);
        } catch (e) {}
        return !0;
    }
    function setCaretPositionForIe(element, position) {
        if (!element) return !1;
        if (!position) return !1;
        element.focus();
        var range = element.createTextRange();
        return range.collapse(!0), range.moveEnd("character", position), range.moveStart("character", position), 
        range.select(), !0;
    }
    function $getCaretPosition($element) {
        return this.get($element.get(0));
    }
    function $setCaretPosition($element, position) {
        return this.set($element.get(0), position);
    }
    return {
        get: "selection" in document ? getCaretPositionForIe : getCaretPosition,
        set: document.createElement("input").createTextRange ? setCaretPositionForIe : setCaretPosition,
        $get: $getCaretPosition,
        $set: $setCaretPosition
    };
}), actiGuide.mainModule.service("layers", [ "$document", function($document) {
    function updateLayers(element) {
        !isInPopup(element) && !isInTree(element) && _layers.length > 0 && !angular.element(element).hasClass("pop-on-click") && popLastLayer();
    }
    function isInTree(element) {
        return _layers.indexOf(angular.element(element)[0]) > -1 ? !0 : "HTML" !== angular.element(element).parent()[0].tagName ? isInTree(angular.element(element).parent()) : !1;
    }
    function isInPopup(element) {
        return angular.element(element).hasClass("popup") ? !0 : "HTML" !== angular.element(element).parent()[0].tagName ? isInPopup(angular.element(element).parent()) : !1;
    }
    function popLastLayer() {
        var $topLayer = angular.element(_layers[_layers.length - 1]), topLayerScope = angular.element($topLayer).data("popupElement") ? angular.element(angular.element($topLayer).data("popupElement")).scope() : $topLayer.scope();
        topLayerScope.visible = !1, topLayerScope.$apply(), _layers.pop();
    }
    var _layers = [];
    return angular.element($document).bind("click", function(e) {
        updateLayers(e.target);
    }), angular.element($document).bind("keyup", function(e) {
        27 == e.which && _layers.length > 0 && popLastLayer();
    }), {
        layersList: _layers,
        updateLayers: updateLayers,
        isInTree: isInTree,
        popLastLayer: popLastLayer
    };
} ]);
//# sourceMappingURL=app.min.map